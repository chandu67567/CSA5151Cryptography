#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int charToNum(char c) { return c - 'a'; }

char numToChar(int n) { return n + 'a'; }

void decrypt(char *ciphertext, int key, char *plaintext) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i++) {
        plaintext[i] = numToChar((charToNum(ciphertext[i]) - key + 26) % 26);
    }
    plaintext[len] = '\0';
}

void calculateFrequency(char *text, int frequency[26]) {
    for (int i = 0; i < 26; i++) frequency[i] = 0;
    for (int i = 0; text[i] != '\0'; i++) frequency[charToNum(text[i])]++;
}

double compareFrequencies(int freq1[26], double freq2[26]) {
    double score = 0.0;
    for (int i = 0; i < 26; i++) score += abs(freq1[i] - freq2[i]);
    return score;
}

int main() {
    char ciphertext[100], plaintext[100];
    printf("Enter the ciphertext: ");
    scanf("%s", ciphertext);

    int topN;
    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &topN);

    double englishFrequencies[26] = {8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 1.974, 0.074};
    
    char possiblePlaintexts[26][100];
    double scores[26];

    for (int key = 0; key < 26; key++) {
        decrypt(ciphertext, key, possiblePlaintexts[key]);
        int frequency[26];
        calculateFrequency(possiblePlaintexts[key], frequency);
        scores[key] = compareFrequencies(frequency, englishFrequencies);
    }

    for (int i = 0; i < 25; i++) {
        for (int j = i + 1; j < 26; j++) {
            if (scores[i] > scores[j]) {
                double tempScore = scores[i];
                scores[i] = scores[j];
                scores[j] = tempScore;
                char tempText[100];
                strcpy(tempText, possiblePlaintexts[i]);
                strcpy(possiblePlaintexts[i], possiblePlaintexts[j]);
                strcpy(possiblePlaintexts[j], tempText);
            }
        }
    }

    printf("Top %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN; i++) {
        printf("%s (score: %.2f)\n", possiblePlaintexts[i], scores[i]);
    }

    return 0;
}
